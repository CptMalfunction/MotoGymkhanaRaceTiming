@page
@model WebAPI.Pages.IndexModel
@{
}

<!DOCTYPE html>
<html lang="en">

<head>

    <title>
        Race Manager
    </title>


    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="~/StaticFiles/bootstrap/3.7.7/css/bootstrap.min.css">
    <script src="~/StaticFiles/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="~/StaticFiles/bootstrap/3.7.7/js/bootstrap.min.js.js"></script>
    <script src="~/StaticFiles/timingInterface.js"></script>

    <script>
        function refrPage() {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {

                    var text = this.responseText;
                    var obj = JSON.parse(text);
                    var waiting = obj.waiting;
                    var onTrack = obj.onTrack;
                    var unmatchedIds = obj.unmatchedEndIds;
                    var unmatchedTimes = obj.unmatchedEndTimes


                    document.getElementById("waiting").innerHTML = "";
                    var waitingTxt = "";

                    if (waiting.length > 0) {
                        waiting.forEach((element) => {
                            waitingTxt += element["Rider"]["Beacon"]["Identifier"] + ": "
                                + element["Rider"]["Name"]
                                + ", Power: "
                                + element["Rider"]["Beacon"]["MeasuredPower"]
                                + ", Distance: "
                                + element["Rider"]["Beacon"]["Distance"] + ";<br>";
                        })
                    }
                    else {
                        waitingTxt = "-";
                    }

                    document.getElementById("waiting").innerHTML = "<p>" + waitingTxt + "</p>";


                    document.getElementById("track").innerHTML = "";
                    var trackTxt = "";

                    if(onTrack.length > 0) {
                        onTrack.forEach((element) => { trackTxt += element["Item1"]["Rider"]["Beacon"]["Identifier"] + ": " + element["Item1"]["Rider"]["Name"] + ";<br>"; })
                    }
                    else {
                        trackTxt = "-";
                    }

                    document.getElementById("track").innerHTML = "<p>" + trackTxt + "</p>";

                    document.getElementById("unmatchedIds").innerHTML = "";
                    unmatchedIdText = "";

                    if (unmatchedIds.length > 0) {
                        unmatchedIds.forEach((element) => {
                            unmatchedIdText += element["Rider"]["Beacon"]["Identifier"] + ": "
                                + element["Rider"]["Name"]
                                + ", Power: "
                                + element["Rider"]["Beacon"]["MeasuredPower"]
                                + ", Distance: "
                                + element["Rider"]["Beacon"]["Distance"] + ";<br>";
                        })
                    }
                    else {
                        unmatchedIdText = "-"
                    }

                    document.getElementById("unmatchedIds").innerHTML = "<p>" + unmatchedIdText + "</p>";

                    document.getElementById("unmatchedTimes").innerHTML = "";
                    unmatchedTimesText = "";

                    if (unmatchedTimes.length > 0) {
                        unmatchedTimes.forEach((element) => {

                            var totalMicroseconds = parseInt(element["Microseconds"]);

                            var totalSpan = new TimeSpan(totalMicroseconds);

                            totalTime = totalSpan.GetMinutes() + ":" + totalSpan.GetSeconds() + ":" + totalSpan.GetMilliseconds();

                            unmatchedTimesText += "Gate: " + element["GateId"]
                                + ", Timer value: "
                                + totalTime
                                + ";<br>";
                        })
                    }
                    else {
                        unmatchedTimesText = "-"
                    }

                    document.getElementById("unmatchedTimes").innerHTML = "<p>" + unmatchedTimesText + "</p>";

                }
            };
            xhttp.open("GET", "/racetracking/State", true);
            xhttp.send();

            var xhttp1 = new XMLHttpRequest();
            xhttp1.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var text = this.responseText;
                    var obj = JSON.parse(text);
                    var results = obj.$values;

                    document.getElementById("times").innerHTML = "";
                    var timesTxt = "";

                    if (results.length > 0) {
                        results.forEach((element) => {
                            var lapTime;
                            if (element["End"]["LapTime"] !== undefined) {
                                var lapMicroseconds = parseInt(element["End"]["LapTime"]);

                                var lapSpan = new TimeSpan(lapMicroseconds);

                                lapTime = lapSpan.GetMinutes() + ":" + lapSpan.GetSeconds() + ":" + lapSpan.GetMilliseconds();
                            }
                            else {
                                lapTime = "DNF"
                            }

                            var rider = element["Rider"]["Beacon"]["Identifier"] + ": "+ element["Rider"]["Name"]

                            timesTxt += rider
                                + ", Time: "
                                + lapTime
                                + ", Power: "
                                + element["Rider"]["Beacon"]["MeasuredPower"]
                                + ", Distance: "
                                + element["Rider"]["Beacon"]["Distance"] + ";<br>";
                        })
                    }

                    document.getElementById("times").innerHTML = timesTxt;
                }
            };
            xhttp1.open("GET", "/racetracking/Laps", true);
            xhttp1.send();


            var parseBeacon = function (beacon) {
                var result = "";

                if (beacon) {
                    result += beacon["Identifier"]
                        + ", Power: "
                        + beacon["MeasuredPower"]
                        + ", Distance: "
                        + beacon["Distance"] + ";<br>";
                }

                return result;
            }

            var beaconsRequest = new XMLHttpRequest();
            beaconsRequest.onreadystatechange = function () {
                if (this.readyState == 4 && this.status === 200) {
                    var text = this.responseText;
                    var obj = JSON.parse(text);
                    var startBeacons = obj.start;
                    var endBeacons = obj.end;

                    document.getElementById("startBeacons").innerHTML = "";
                    var startText = parseBeacon(startBeacons);

                    document.getElementById("startBeacons").innerHTML = startText;

                    document.getElementById("endBeacons").innerHTML = "";
                    var endText = parseBeacon(endBeacons);

                    document.getElementById("endBeacons").innerHTML = endText;
                }
            }
            beaconsRequest.open("GET", "/racetracking/Beacons", true);
            beaconsRequest.send();
        }
    </script>

</head>

<body>


    <h1>
        Race Manager
    </h1>

    <h3>Beacons voor start gate</h3>
    <div id="startBeacons"></div>

    <h3>Beacons voor end gate</h3>
    <div id="endBeacons"></div>

    <h3>Losse ids</h3>
    <div id="unmatchedIds"></div>

    <h3>Losse times</h3>
    <div id="unmatchedTimes"></div>

    <h3>In startvak</h3>
    <div id="waiting"></div>

    <h3>Op de baan</h3>
    <div id="track"></div>

    <h3>Tijden</h3>
    <div id="times"></div>


    <script>

        // Refresh every xxx milliseconds:
        var intervalId = window.setInterval(function () {
            refrPage();
        }, 1000);

    </script>

</body>
</html>